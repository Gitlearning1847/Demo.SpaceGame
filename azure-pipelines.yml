name: $(Major).$(Minor).$(Patch)
variables:
  buildConfiguration: 'Release'
  dotnetSdkVersion: '3.1.100'
  serviceConnection: 'tailspin-space-game-rg'
  appName: 'tailspin-space-game-web'
  appID: '26178'
  SITE_URL: 'https://$(appName)-$(System.StageName)-$(appID).azurewebsites.net'
  wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
  Major: '1'
  Minor: '1'
  Patch: $[counter(format('{0}.{1}', variables['Major'], variables['Minor']), 0)]
      
stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs: 
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'vs2017-win2016'
      demands:
        - npm
    steps:
    - template: common.yml@templates  # Template reference    
    - task: DotNetCoreInstaller@2
      displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
      inputs:
        packageType: sdk
        version: '$(dotnetSdkVersion)'
    - task: DotNetCoreCLI@2
      displayName: 'Install ReportGenerator'
      inputs:
        command: custom
        custom: tool
        arguments: 'install --global dotnet-reportgenerator-globaltool'
    - task: Npm@1
      displayName: 'Run npm install'
      inputs:
        verbose: false

    - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
      displayName: 'Compile Sass assets'

    - task: gulp@1
      displayName: 'Run gulp tasks'

    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
      displayName: 'Write build info'
      workingDirectory: $(wwwrootDir)

    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Run unit tests - $(buildConfiguration)'
      inputs:
        command: 'test'
        arguments: '--no-build --configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
        publishTestResults: true
        projects: '**/*.Tests.csproj'
        testRunTitle: 'Unit Tests'

    - script: |
        reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines
      displayName: 'Create code coverage report'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage report'
      inputs:
        codeCoverageTool: 'cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'

    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '**/Tailspin.SpaceGame.Web.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: drop

  - job: BuildDacpac
    pool:
      vmImage: 'windows-2019'
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: VSBuild@1
      displayName: 'Build the database project'
      inputs:
        project: '**/*.sqlproj'

    - task: CopyFiles@2
      displayName: 'Copy dacpac file to staging directory'
      inputs:
        contents: |
          Tailspin.SpaceGame.Database/bin/**/*.dacpac
        targetFolder: '$(Build.StagingDirectory)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: dropDacpac
      condition: succeededOrFailed()

- stage: 'Deploy'
  displayName: 'Deploy to the dev environment'
  dependsOn:
  - Build
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'Ubuntu-16.04'
    environment: dev
    variables:
    - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs:
              azureSubscription: '$(serviceConnection)'
              appName: '$(appName)-$(System.StageName)-$(appID)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'
          - task: AzureCLI@2
            displayName: 'Set connection string'
            inputs:
              azureSubscription: '$(serviceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az webapp config connection-string set --name $(appName)-$(System.StageName)-$(appID) --resource-group $(serviceConnection) --connection-string-type SQLAzure --settings "DefaultConnection=Server=tcp:$(servername).database.windows.net,1433;Initial Catalog=$(databasename);Persist Security Info=False;User ID=$(adminlogin);Password=$(adminPassword);MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"

  displayName: 'Deploy to the Production environment'
  dependsOn: Staging
  condition: and(succeeded('Staging'), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'Ubuntu-16.04'
    environment: prod
    variables:
      - name: serviceConnection
        value: 'tailspin-space-game-prod-rg'      
      - group: 'Release'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs:
              azureSubscription: '$(serviceConnection)'
              appName: '$(appName)-$(System.StageName)-$(appID)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'
          - task: AzureCLI@2
            displayName: 'Set connection string'
            inputs:
              azureSubscription: '$(serviceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az webapp config connection-string set --name $(appName)-$(System.StageName)-$(appID) --resource-group $(serviceConnection) --connection-string-type SQLAzure --settings "DefaultConnection=Server=tcp:$(servername).database.windows.net,1433;Initial Catalog=$(databasename);Persist Security Info=False;User ID=$(adminlogin);Password=$(adminPassword);MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"              
  - job: RunUITests
    dependsOn: Deploy
    displayName: 'Run UI tests'
    pool:
      vmImage: 'vs2017-win2016'
    variables:
    - group: 'Release'
    steps: 
    - task: DotNetCoreInstaller@2
      displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
      inputs:
        packageType: sdk
        version: '$(dotnetSdkVersion)'
    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--configuration $(buildConfiguration)'
        projects: '$(System.DefaultWorkingDirectory)/**/*UITests.csproj'
    - task: DotNetCoreCLI@2
      displayName: 'Run UI tests - $(buildConfiguration)'
      inputs:
        command: 'test'
        arguments: '--no-build --configuration $(buildConfiguration)'
        publishTestResults: true
        projects: '$(System.DefaultWorkingDirectory)/**/*UITests.csproj'
        testRunTitle: 'UI Tests'           